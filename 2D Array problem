A company has decided to promote interactions between connections in various apartments. They have created a number of nodes which are to be connected to form a cluster to find 
the above information. The nodes are described by a 2D grid of 0's and 1's with n rows and m columns, a cell containing a zero denotes not working, while a cell containing a 
one is a cell that denotes a working node. i.e.

(1 and 0), (0 and1) and(0 and 0) have no connections. but (1 and 1) have connection.

Input Format
-The first line contains an integer, n, denoting the number of rows in gridofNodes
-The next line contains an integer, m, denoting the number of columns in gridOfNodes
-Grid values containing only 1's and 0's

Constraints
0 < n,m <= 10

Output Format
Single line integer output denoting number of connections

Sample Input 0
3
7
1011110
0110101
1000001
Sample Output 0
28
Explanation 0
5 nodes in the first row get connected with 4 nodes in the second row, 20 connections. Then 4 nodes in the second row get connected with 2 nodes in the third row,
8 connections 20+8 = 28 connections in total.
---------------------------------------------
Test Cases1
3
7
1011110
0110101
1000001
outpput->28
Test Cases2
4
5
10001
11111
11001
00010
output->28
Test Cases3
5
3
111
111
000
111
101
output->15
---------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
Program
------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;
class Solution {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int rows = sc.nextInt();
        int cols = sc.nextInt();
        int[][] arr = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            String input = sc.next();
            String[] s = input.split("");
            for (int j = 0; j < arr[i].length; j++) {
                arr[i][j]=Integer.parseInt(s[j]);
            }
        }
        int sum = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            int count1 = 0, count2 = 0;
            for (int j = 0; j < arr[i].length; j++)
                if (arr[i][j] == 1) {
                    count1++;
                }
            for (int k = 0; k < arr[i + 1].length; k++)
                if (arr[i + 1][k] == 1) {
                    count2++;
                }
            sum += count1 * count2;
        }
        System.out.println(sum);
    }
}
