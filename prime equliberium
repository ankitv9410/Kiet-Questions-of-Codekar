Usser need to find out prime equliberium index of given number. prime equliberium index is based upon how far a number is from nearest prime number.

Input Format
single line input, only one integer(N)

Constraints
5<=N<=1000000000

Output Format
either positive or negetive integer

Sample Input 0
63

Sample Output 0
-2
Explanation 0
around prime number of 63 are 61 and 67 in both side. 61-63 = -2 67-63 = 4 
so the nearest prime number is 61 and prime equliberium index is -2, if N is eqully distant from both prime numbers then positive equliberium index will be consider
--------------------------------------------------------------------------------------------
Test Cases
Input1 63 Output1 -2
Input2 93 Output2 4
Input3 73 Output3 0
Input4 113575750 Output4 -3
--------------------------------------------------------------------------------------------
import java.util.Scanner;

class Solution {
	public static void foundPrimeNumber(int number) {
		int temp1, temp2, foundNumber = 0;
		for (int k = 1; k < number / 2; k++) {
			boolean found1 = true, found2 = true;
			temp1 = number + k;
			temp2 = number - k;
			for (int j = 2; j < number / 2; j++) {
				if (temp1 % j == 0) {
					found1 = false;
					break;
				}
			}
			if (found1) {
				foundNumber = temp1;
				break;
			}
			for (int j = 2; j < number / 2; j++) {
				if (temp2 % j == 0) {
					found2 = false;
					break;
				}
			}
			if (found2) {
				foundNumber = temp2;
				break;
			}
		}

		int result = foundNumber - number;
		System.out.println(result);
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int number = sc.nextInt();
		boolean found = true;
		for (int i = 2; i < number / 2; i++) {
			if (number % i == 0) {
				found = false;
				break;
			}
		}
		if (found)
			System.out.println("0");
		else
			foundPrimeNumber(number);
	}
}
